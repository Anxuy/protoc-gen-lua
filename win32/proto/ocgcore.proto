option optimize_for = LITE_RUNTIME;

import "nova.proto";

//////////////////////////////////////////////////////////////////////
// 以下为透传协议
//////////////////////////////////////////////////////////////////////

message RspSyncDeck
{
    optional ResultType result = 1; // 同步结果

    repeated uint32 mainc = 2;  // 同步卡组数据
    repeated uint32 extra = 3;  // 同步卡组数据
}


message ReqFingerGuessing
{
    optional uint32 result = 1;         // 1.剪刀，2.石头，3.布
}

message RspFingerGuessing
{
    optional uint32 winneruid = 1;      // 获胜玩家的UID， 未分胜负的时候uid为0
    optional uint32 winnerhand = 2;     // 获胜或平局玩家的手势
}

message TimeConfirm
{
    // 客户度给服务器的确认倒计时回包
}

message ReqChatText
{
    optional uint32 textindex = 1;
}










enum TpType {
    OFFENSIVE = 1;
    DEFENSIVE = 2;
  }

message ReqOffensiveOrDefensive
{
    optional bool isoffensive = 1 [default = false];
}

message RspOffensiveOrDefensive
{
    optional uint32 offensiveuid = 1;       // 先手玩家的UID
}


message RspDuelStart
{
    // 协议内容非PB定义。。。
}

message RspTimeConfirm
{
    // TODO:
}

message ReqLeaveGame
{
    // TODO:
}

message RspLeaveGame
{
    // TODO:
}
message ReqWaitResponse
{
    // TODO:
}

message RspWaitResponse
{
    // TODO:
}

message ReqSurrender
{
    // TODO: 认输
}

message RspSurrender
{
    // TODO: 认输
}

message RspDuelEnd
{
    optional uint32 winuid = 1;             // 本局获胜玩家的UID
}


////////////////////////////////////////////////////////////////////////////////////////
// 游戏内

message GameMsgRetry
{
    // 空协议，仅供解析ID。
}

message GameMsgHint
{
    optional uint32 type = 1;
    optional uint32 player = 2;
}

message GameMsgWin
{
    optional uint32 type = 1;
    optional uint32 player = 2;
}

message GameMsgSelectBattleCmd
{

}

message GameMsgIdleCmd
{

}

message GameMsgSelectEffectYN
{

}

message GameMsgSelectYesNo
{

}

message GameMsgSelectOption
{

}
